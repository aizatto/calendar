{"version":3,"sources":["contexts/GoogleContext.tsx","List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GoogleContext","React","createContext","authenticated","day","Date","timeMin","dateFns","timeMax","Attendees","props","event","attendees","length","attendeesElement","sort","a","b","displayName","email","localeCompare","map","attendee","key","id","Event","start","dateTime","title","hangoutButton","hangoutLink","href","style","textDecoration","locationElement","location","htmlLink","summary","dangerouslySetInnerHTML","__html","description","CalendarAuthenticated","useState","events","setEvents","useEffect","async","gapi","client","calendar","list","calendarId","toISOString","maxResults","orderBy","singleEvents","result","items","eventsFiltered","filter","status","end","eventsGroupBy","lodash","groupBy","days","date","eventsElements","paddingBottom","Fragment","Calendar","Consumer","App","setAuthenticated","script","document","createElement","src","defer","initClient","discoveryDocs","scope","join","init","apiKey","process","REACT_APP_GOOGLE_APP_ID","clientId","GoogleAuth","auth2","getAuthInstance","isSignedIn","listen","signedIn","googleUser","currentUser","get","console","log","getBasicProfile","onload","load","firstScript","getElementsByTagName","parentNode","insertBefore","Provider","value","className","Button","onClick","signOut","signIn","prompt","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd48fa96.chunk.js","sourcesContent":["import React from 'react';\n\nexport const GoogleContext = React.createContext({\n  authenticated: false,\n  // IsSignedInListener: (signedIn: boolean): void => {},\n});","import React, { useState, useEffect } from 'react';\nimport { GoogleContext } from './contexts/GoogleContext';\nimport * as dateFns from 'date-fns';\nimport lodash from 'lodash';\n\nconst day = new Date();\nconst timeMin = dateFns.startOfDay(day);\nconst timeMax = dateFns.endOfDay(dateFns.addDays(day, 5));\n\nconst Attendees: React.FC<{event: gapi.client.calendar.Event}> = (props) => {\n  const event = props.event;\n\n  if (!event.attendees || !event.attendees.length) {\n    return <></>;\n  }\n\n  const attendees = event.attendees.sort((a, b) => {\n    if (a.displayName && !b.displayName) {\n      return 1;\n    } else if (!a.displayName && b.displayName) {\n      return -1;\n    }\n\n    return a.email.localeCompare(b.email);\n  });\n\n  const attendeesElement = attendees.map(attendee => \n    <li key={`${event.id}:${attendee.email}`}>\n      {attendee.displayName ? attendee.displayName : attendee.email}\n    </li>\n  );\n\n  return (\n    <>\n      Attendees:\n      <ol>\n        {attendeesElement}\n      </ol>\n    </>\n  );\n}\n\nconst Event: React.FC<{event: gapi.client.calendar.Event}> = (props) => {\n  const event = props.event;\n\n  const start = event.start.dateTime\n    ? <span title={event.start.dateTime}>\n        {dateFns.format(new Date(event.start.dateTime), 'HH:mm')}\n      </span>\n    : null;\n\n  const hangoutButton = event.hangoutLink\n    ? <a href={event.hangoutLink}>Hangout Link</a>\n    : <span style={{textDecoration: 'line-through'}}>Hangout Link</span>\n\n  const locationElement = event.location\n    ? <div>{event.location}</div>\n    : null;\n\n  return (\n    <>\n      <div>\n        {start} <a href={event.htmlLink}>{event.summary}</a>\n      </div>\n      {locationElement}\n\n      <Attendees event={event} />\n\n      <div dangerouslySetInnerHTML={{__html: event.description}} />\n\n      {hangoutButton}\n    </>\n  );\n}\n\nexport const CalendarAuthenticated: React.FC = (props) => {\n  const [events, setEvents] = useState<gapi.client.calendar.Event[]>([]);\n  useEffect(() => {\n    (async () => {\n      const events = await gapi.client.calendar.events.list({\n        calendarId: 'primary',\n        timeMin: timeMin.toISOString(),\n        timeMax: timeMax.toISOString(),\n        maxResults: 100, \n        orderBy: 'startTime',\n        singleEvents: true,\n      });\n      setEvents(events.result.items);\n    })();\n  }, []);\n\n  const eventsFiltered = events.filter(\n    (event) => {\n      if (event.status === 'cancelled') {\n        return false;\n      }\n      \n      if (event.end.dateTime &&\n          dateFns.isBefore(new Date(event.end.dateTime), timeMin)) {\n        return false;\n      }\n\n      return true;\n    }\n  );\n\n  const eventsGroupBy = lodash.groupBy(\n    eventsFiltered,\n    (event) => {\n      if (!event.start.dateTime) {\n        return null;\n      }\n      return dateFns.startOfDay(new Date(event.start.dateTime))\n    });\n  \n  const days = lodash.map(eventsGroupBy, (events, date) => {\n    const eventsElements = events.map(event => {\n      return (\n        <li key={event.id} style={{paddingBottom: '1rem'}}>\n          <Event event={event} />\n        </li>\n      );\n    });\n\n    return (\n      <React.Fragment key={date}>\n        <h5>{dateFns.format(new Date(date), 'EEEE yyyy-MM-dd')}</h5>\n        <ol>\n          {eventsElements}\n        </ol>\n      </React.Fragment>\n    );\n  });\n\n  return (\n    <>\n      {days}\n    </>\n  )\n}\n\nexport const Calendar: React.FC = (props) => {\n  return (\n    <>\n      <GoogleContext.Consumer>\n        {({authenticated}) => (\n          authenticated \n            ? <CalendarAuthenticated />\n            : <>Not Authenticated</>\n        )}\n      </GoogleContext.Consumer>\n    </>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { GoogleContext } from './contexts/GoogleContext';\nimport { Button } from 'reactstrap';\nimport { Calendar } from './List';\n\nconst App: React.FC = () => {\n  const [authenticated, setAuthenticated] = useState(false);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://apis.google.com/js/api.js';\n    script.async = true;\n    script.defer = true;\n\n    const initClient = async () => {\n      const discoveryDocs = [\n        // https://developers.google.com/calendar/quickstart/js\n        \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"\n      ];\n      const scope = [\n        'https://www.googleapis.com/auth/calendar.events.readonly',\n        'https://www.googleapis.com/auth/calendar.readonly',\n      ].join(' ');\n      await gapi.client.init({\n        discoveryDocs,\n        scope,\n        apiKey: process.env.REACT_APP_GOOGLE_APP_ID,\n        clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n      });\n\n      const GoogleAuth = gapi.auth2.getAuthInstance();\n      GoogleAuth.isSignedIn.listen((signedIn) => {\n        setAuthenticated(signedIn);\n      });\n      const googleUser = GoogleAuth.currentUser.get();\n      setAuthenticated(googleUser.isSignedIn());\n      console.log(googleUser.getBasicProfile());\n    }\n    script.onload = () => {\n      gapi.load('client:auth2', initClient);\n    }\n\n    const firstScript = document.getElementsByTagName('script')[0];\n    // @ts-ignore\n    firstScript.parentNode.insertBefore(script, firstScript);\n  }, []);\n\n  const signIn = () => {\n    gapi.auth2.getAuthInstance().signIn({\n      prompt: 'select_account',\n    });\n  }\n\n  const signOut = () => {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  return (\n    <GoogleContext.Provider value={{authenticated}}>\n      <div className=\"App\">\n        {!authenticated\n          ? <Button onClick={signIn}>\n              Sign In\n            </Button>\n          : <Button onClick={signOut}>\n              Sign out\n            </Button>\n        }\n      </div>\n      <Calendar />\n    </GoogleContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}